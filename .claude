# CriptoGualet - Cross-Platform Cryptocurrency Wallet

## Project Overview
CriptoGualet is a **non-custodial cryptocurrency and digital assets wallet** with both Windows native (Win32) and modern Qt GUI interfaces. Built with CMake for cross-platform compatibility, it features secure cryptographic operations, QR code generation, and seed phrase management.

## Architecture

### Core Libraries
- **Auth** (`src/Auth.cpp`, `include/Auth.h`) - Authentication and wallet management
- **Crypto** (`src/Crypto.cpp`, `include/Crypto.h`) - Cryptographic functions using Windows CryptoAPI
- **QRGenerator** (`src/QRGenerator.cpp`, `include/QRGenerator.h`) - QR code generation with libqrencode

### User Interfaces
- **Qt GUI** (Primary) - Modern cross-platform interface using Qt6
  - `CriptoGualetQt.cpp` - Main Qt application
  - `QtLoginUI.cpp` - Qt login interface
  - `QtWalletUI.cpp` - Qt wallet interface
  - `QtThemeManager.cpp` - Theme management
  - `QtSeedDisplayDialog.cpp` - Seed phrase display dialog

- **Win32 GUI** (Windows) - Native Windows interface
  - `CriptoGualet.cpp` - Main Win32 application
  - `LoginUI.cpp` - Win32 login interface
  - `WalletUI.cpp` - Win32 wallet interface

### Test Suite
- `src/Tests/test_basic_auth.cpp` - Basic authentication tests
- `src/Tests/test_bip39.cpp` - BIP39 seed phrase tests
- `src/Tests/test_secure_seed.cpp` - Secure seed generation tests

## Build System

### CMake Configuration
- **Root**: `CMakeLists.txt` - Main build configuration with compiler detection
- **Source**: `src/CMakeLists.txt` - Library and executable definitions
- **Presets**: `CMakePresets.json` - Build configuration presets
- **Settings**: `CMakeSettings.json` - Visual Studio CMake settings

### Compiler Support
- **Clang** (Primary) - Cross-platform with LLVM
- **Clang-CL** - MSVC compatibility on Windows
- **MSVC** - Native Windows compiler
- **GCC** - Linux/Unix systems

### Dependencies (vcpkg)
- **Qt6** - Modern GUI framework (Core, Widgets, Gui)
- **libqrencode** - QR code generation library
- **Windows CryptoAPI** - Native cryptographic functions (bcrypt, crypt32)

## Build Commands

### Configure and Build
```bash
# Configure with default preset
cmake --preset=default

# Build debug version
cmake --build out/build/win-clang-x64-debug

# Build release version
cmake --build out/build/win-clang-x64-release
```

### Test Executables
```bash
# Run authentication tests
./out/bin/debug_test

# Run BIP39 tests
./out/bin/test_bip39

# Run secure seed tests
./out/bin/test_secure_seed
```

### Development Tools
```bash
# Format code with clang-format
clang-format -i src/**/*.cpp include/**/*.h

# Lint code with clang-tidy
clang-tidy src/**/*.cpp -- -I./include

# Generate compile commands (automatic)
# Output: compile_commands.json
```

## Project Structure
```
CriptoGualet/
├── CMakeLists.txt              # Root build configuration
├── CMakePresets.json           # Build presets
├── CMakeSettings.json          # VS CMake settings
├── vcpkg.json                  # Dependency management
├── .clang-format              # Code formatting rules
├── .clang-tidy                # Static analysis rules
├── include/                    # Public headers
│   ├── Auth.h
│   ├── Crypto.h
│   ├── QRGenerator.h
│   ├── CriptoGualetQt.h
│   ├── QtLoginUI.h
│   ├── QtWalletUI.h
│   ├── QtThemeManager.h
│   └── QtSeedDisplayDialog.h
├── src/                        # Source files
│   ├── CMakeLists.txt          # Source build config
│   ├── Auth.cpp
│   ├── Crypto.cpp
│   ├── QRGenerator.cpp
│   ├── CriptoGualetQt.cpp      # Qt main application
│   ├── QtLoginUI.cpp
│   ├── QtWalletUI.cpp
│   ├── QtThemeManager.cpp
│   ├── QtSeedDisplayDialog.cpp
│   ├── CriptoGualet.cpp        # Win32 main application
│   ├── LoginUI.cpp
│   ├── WalletUI.cpp
│   ├── SharedSymbols.cpp
│   └── Tests/
│       ├── test_basic_auth.cpp
│       ├── test_bip39.cpp
│       └── test_secure_seed.cpp
├── out/                        # Build output directory
│   └── build/
│       └── win-clang-x64-debug/
└── ProjectGuides/              # Documentation
```

## Key Features
- **Non-custodial** - Users control their private keys
- **Cross-platform** - Windows, macOS, Linux support via Qt
- **Secure** - Windows CryptoAPI integration, security compiler flags
- **Modern UI** - Qt6 with theme management
- **QR Codes** - Generate QR codes for addresses and seed phrases
- **BIP39** - Standard seed phrase generation and management
- **Multiple Builds** - Both Qt and Win32 GUI options

## Development Notes
- Primary startup project: `CriptoGualetQt` (Qt GUI)
- Fallback startup project: `CriptoGualet` (Win32 GUI)
- All libraries built as static for security
- Automatic Qt DLL deployment on Windows
- Cross-platform security flags enabled
- Export compile commands for IntelliSense support